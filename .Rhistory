# Load the needed libraries and define some functions
library(tidyverse)
# Load the needed libraries and define some functions
library(tidyverse)
library(plotly)
# Load some user-defined functions (Pruby)
source("myfunc.R")
# Normalized Lorentzian function
Lor <- function(x,x0=0,FWHM=1){
2/(pi*FWHM)/( 1 + ((x-x0)/(FWHM/2))^2 )
}
# Find all the files in "Data"
frubis <- list.files(path="Data", pattern = "rubis")
frubis
head(frubis)
length(frubis)
# Create a tibble to store each spectra
spec   <- tibble()
# and a tibble to store the fit parameters
fitpar <- tibble()
# Reading and storing all treated data
for(file in frubis){
# Reading raw data to a tibble
d <- read_table(file.path("Data",file),
col_names = c("w", "Int") )
# Fitting two Lorentzians using the previously defined function Lor()
# Initial guess of the position and parameters:
xmax  <- d$w[which.max(d$Int)]
Guess <- c(y0   = 0.01,               # constant background
x    = c(xmax-2, xmax-30), # positions
FWHM = c(10, 10),          # full width at half maximum
A    = c(max(d$Int), max(d$Int))*10 # amplitudes
)
fit <- nls(data  = d, Int ~ y0 + A1*Lor(w,x1,FWHM1) + A2*Lor(w,x2,FWHM2),
start = as.list(Guess),
lower = as.list(Guess*0),
algorithm = "port"
)
# Compute the various components of the fit
p  <- coef(fit)
y0 <- p['y0']
y1 <- p['A1']*Lor(d$w, x0=p['x1'], FWHM=p['FWHM1'])
y2 <- p['A2']*Lor(d$w, x0=p['x2'], FWHM=p['FWHM2'])
ytot <- y0 + y1 + y2
# Store all the data and fits in a tidy tibble
spec <- bind_rows(spec,
tibble(w      = d$w,
Int    = d$Int,
Int_n  = d$Int/max(d$Int),
y1_n   = y1/max(d$Int),
y2_n   = y2/max(d$Int),
ytot_n = ytot/max(d$Int),
name   = gsub(".txt","",file),
P      = round(Pruby(p['x1']),2)
)
)
# Store the fitting parameters in a tidy data.frame
fitpar <- bind_rows(fitpar,
broom::tidy(fit) %>%
select(term,estimate,std.error) %>%
mutate(name = gsub(".txt","",file),
P    = round(Pruby(p['x1']),2))
)
# Uncomment and plot to check if everything is OK:
# spec %>% filter(name==gsub(".txt","",file)) %>%
# ggplot(aes(x=w)) +
#   ggtitle(file)+
#   geom_point(aes(y=Int))+
#   geom_line(aes(y=ytot),color="red")+
#   geom_area(aes(y=y1),fill="orange", alpha=0.1)+
#   geom_area(aes(y=y2),fill="royalblue", alpha=0.1)+
#   theme_bw()
}
gg <- ggplot(data = spec, aes(x = w, frame=P)) +
labs(x = "Raman Shift [1/cm]",
y = "Intensity [arb. units]")+
geom_point(aes(y=Int_n))+
geom_line(aes(y=ytot_n), color="red")+
geom_line(aes(y=y1_n), color="royalblue", alpha=0.5)+
geom_line(aes(y=y2_n), color="orange", alpha=0.5)+
theme_bw()
ggplotly(gg, dynamicTicks = TRUE) %>%
animation_opts(5)%>%
layout(xaxis = list(autorange=FALSE, range = c(3050, 3550)))%>%
animation_slider(
currentvalue = list(prefix = "Pressure: ",
suffix = " GPa", font = list(color="red"))
)
