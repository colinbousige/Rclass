install.packages('FME')
my_func <- function(x){exp(-x^2)*sin(x/pi)}
plot(x,y)
my_func <- function(x){exp(-x^2)*sin(x/pi)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x,y)
View(my_func)
df<-data.frame(x,y)
View(df)
library(ggplot2)
qplot(x,y)
my_func <- function(x){exp(-x^2)*sin(x/pi)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x,y)
plot(x,y, type="l", lwd=3)
my_func <- function(x){exp(-300*x^2)*sin(x/pi)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
my_func <- function(x){exp(-.2*x^2)*sin(x/pi)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
my_func <- function(x){exp(-.2*x^2)*sin(x)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
my_func <- function(x){exp(-.02*x^2)*sin(x)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
my_func <- function(x){exp(-.05*x^2)*sin(x)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
colourpicker:::plotHelperAddin()
esquisse:::esquisser()
my_func <- function(x){exp(-.05*x^2)*sin(x)}
x <- seq(-10,10,by=0.1)
y <- my_func(x)
plot(x, y, type="l", lwd=3)
?sin
colourpicker:::plotHelperAddin()
knit_with_parameters('~/Travail/Enseignements/R/tutoR.Rmd')
shiny::runApp('temp')
runApp('temp')
library(DT)
runApp('temp')
runApp('temp')
shiny::runApp('temp')
shiny::runApp('shiny_example')
runApp('shiny_example')
runApp('shiny_example')
runApp('shiny_example')
runApp('shiny_example')
runApp('shiny_example')
runApp('test')
runApp('test')
runApp('test')
towrite<-paste("
---
title: test
output: pdf_document
---
```{r}
plot(1:10,1:10)
```
")
outfile <- file("temp.Rmd", encoding="UTF-8")
write(towrite, file=outfile)
close(outfile)
render("temp.Rmd", "temp.pdf")
render("temp.Rmd", output="temp.pdf")
render("temp.Rmd", output_format="pdf")
render("temp.Rmd")
runApp('test')
runApp('test')
install.packages(c("bib2df", "blogdown", "bookdown", "boot", "callr", "checkmate", "class", "clipr", "cluster", "coda", "codetools", "cowplot", "crul", "data.table", "deSolve", "devtools", "dplyr", "esquisse", "evaluate", "fields", "filehash", "fs", "ggthemes", "git2r", "haven", "hexbin", "highr", "hms", "IRkernel", "markdown", "MASS", "Matrix", "mgcv", "nlme", "openssl", "openxlsx", "pkgbuild", "plotly", "processx", "raster", "rcmdcheck", "rcrossref", "RefManageR", "remotes", "reticulate", "rJava", "rmarkdown", "rpart", "rvest", "servr", "spam", "survival", "swirl", "sys", "testthat", "tidyr", "urltools", "usethis", "zip"))
install.packages("rticles")
install.packages("deSolve")
people
install.packages(c("boot", "foreign", "nlme"))
library(tidyverse)
dt <- tibble(x     = rep(runif(5,-1,1),2),
y     = runif(10,-1,1),
signx = ifelse(x>0,"positive","negative"),
signy = ifelse(y>0,"positive","negative")
)
dt
# row/column means
rowMeans(dt[,1:2])
colMeans(dt[,1:2])
# means by groups of another variable
dt %>%
group_by(signx) %>%
summarise(mean_x=mean(x))
dt %>%
group_by(signx, signy) %>%
summarise(mean_x=mean(x), mean_y=mean(y))
# sorting
dt %>%
arrange(x)
dt %>%
arrange(x, desc(y))
# merge table information
dt2 <- tibble(signx=c("positive","positive","negative","negative"),
signy=c("positive","negative","positive","negative"),
value=c(TRUE, FALSE, FALSE, TRUE))
dt2
inner_join(dt,dt2)
# add/modify a column
dt %>% mutate(w=1:10, z=sin(x))
dt %>% mutate(x=1:10)
# selecting columns
dt %>%
select(startsWith("pos"))
# selecting columns
dt %>%
select(prefix=startsWith("pos"))
?select
# selecting columns
dt %>%
select(starts_with("pos"))
# selecting columns
dt %>%
select(cols=starts_with("pos"))
# selecting columns
dt %>%
select(col=starts_with("pos"))
# selecting columns
\select(dt,starts_with("pos"))
# selecting columns
\select(dt,starts_with("sign"))
# selecting columns
select(dt,starts_with("sign"))
# selecting columns
dt %>%
select(col=starts_with("sign"))
# selecting columns
dt %>%
select(starts_with("sign"))
dt %>%
select(ends_with("x"))
install.packages("tidymodels")
?numDeriv
numDeriv
library(numDeriv)
?numDeriv
??numDeriv
?fileInput
library(shiny)
library(tidyverse)
library(plotly)
?fileInput
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
?plotlyOutput
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
?sidebarLayout
runApp('~/Travail/Data/LMI/QCM/QCM_read/QCM_read')
setwd("~/Downloads/")
library(dplyr)
library(readxl)
library(stringr)
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & !str_detect(auth, "Auvray Loïc"))
d_sorted
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
setwd("~/Downloads/")
library(dplyr)
library(readxl)
library(stringr)
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & !str_detect(auth, "Auvray Loïc") |
is.na(lab) & !str_detect(auth, "Auvray Frédéric")
)
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
setwd("~/Downloads/")
library(dplyr)
library(readxl)
library(stringr)
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & str_detect(auth, "Auvray L") & !str_detect(auth, "Auvray Loïc")
)
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
setwd("~/Downloads/")
library(dplyr)
library(readxl)
library(stringr)
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d <- d %>% mutate(lab=gsub("\\,"," ",lab),auth=gsub("\\,"," ",auth))
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & str_detect(auth, "Auvray L") & !str_detect(auth, "Auvray Loïc")
)
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d <- d %>% mutate(lab=gsub("\,"," ",lab),auth=gsub("\,"," ",auth))
d <- d %>% mutate(lab=gsub("\\\\,"," ",lab),auth=gsub("\\\\,"," ",auth))
d
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & str_detect(auth, "Auvray L") & !str_detect(auth, "Auvray Loïc")
)
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
d[d$HALID=="hal-00789509",]
d <- read_excel("test_export_HAL.xlsx", col_names = c("HALID","lab","auth"), skip=1)
d <- d %>% mutate(lab=gsub("Ã©","é",lab),auth=gsub("Ã©","é",auth))
d <- d %>% mutate(lab=gsub("Ã¨","è",lab),auth=gsub("Ã¨","è",auth))
d <- d %>% mutate(lab=gsub("Ã´","ô",lab),auth=gsub("Ã´","ô",auth))
d <- d %>% mutate(lab=gsub("Ã¯","ï",lab),auth=gsub("Ã¯","ï",auth))
d <- d %>% mutate(lab=gsub("Ã¼","ü",lab),auth=gsub("Ã¼","ü",auth))
d <- d %>% mutate(lab=gsub("\\\\,","",lab),auth=gsub("\\\\,","",auth))
d[d$HALID=="hal-00789509",]
d_sorted <- d %>%
filter(!str_detect(lab, "Laboratoire des Multimatériaux et Interfaces") & str_detect(auth, "Auvray Laurent") |
is.na(lab) & str_detect(auth, "Auvray L") & !str_detect(auth, "Auvray Loïc")
)
write.csv2(d_sorted,"test_export_HAL_sorted.csv")
shiny::runApp('~/Travail/Scripts/sort_pubs')
runApp('~/Travail/Scripts/sort_pubs')
runApp('~/Travail/Scripts/sort_pubs')
plot(cars)
Sys.Date()
# Set your working directory here
setwd("/Users/colin/Travail/Enseignements/R/Exam")
library(ggplot2)
theme_set(theme_bw())
head(trees,6)
setwd("/Users/colin/Travail/Enseignements/R/Exo/")
#Load `FTIR_rocks.xlsx` into a `data.frame` (in fact, `tibble`).
#Rename the columns with simpler names, such as "w", "r1", "r2" and "r3"
#Find the wavenumber value of the maximum of each spectrum
#Create a function `norm01()` that, given a vector, returns the vector normalized to [0,1]
#Normalize all columns of FTIR intensity to [0,1]
#Using base graphics or `ggplot2`, as you wish, try to reproduce the following graphs
library(readxl)
df<-read_excel("Data/FTIR_rocks.xlsx")
names(df)<-c("w", "r1", "r2", "r3")
df
df$r1
max(df$r1)
which.max(df$r1)
df$w[which.max(df$r1)]
max1<-df$w[which.max(df$r1)]
which.max(df[,"r1"])
which.max(df[["r1"]])
df
as.data.frame(df)
df<-as.data.frame(df)
df$w[which.max(df[,"r1"])]
#Load `FTIR_rocks.xlsx` into a `data.frame` (in fact, `tibble`).
#Rename the columns with simpler names, such as "w", "r1", "r2" and "r3"
#Find the wavenumber value of the maximum of each spectrum
#Create a function `norm01()` that, given a vector, returns the vector normalized to [0,1]
#Normalize all columns of FTIR intensity to [0,1]
#Using base graphics or `ggplot2`, as you wish, try to reproduce the following graphs
library(readxl)
df<-read_excel("Data/FTIR_rocks.xlsx")
names(df)<-c("w", "r1", "r2", "r3")
names(df)<-c("w", "r1", "r2", "r3")
max1<-df$w[which.max(df$r1)]
spec<-list()
flist<-list.files(path="Data", pattern = "rubis")
flist
for (f in flist) {
spec[[f]]<-read.table(f)
}
for (f in flist) {
spec[[f]]<-read.table(paste0("Data/",f))
}
for (f in flist) {
spec[[f]]<-read.table(paste0("Data/",f), col.names = c("w","Int"))
}
maxpos<-data.frame(name=flist,max=NA)
maxpos
library(ggplot2)
ggplot(data=df, aes(x=w))+
geom_line(aes(y=r1), col="black")+
geom_line(aes(y=r2), col="red")
ggplot(data=df, aes(x=w))+
geom_line(aes(y=r2), col="red")+
geom_line(aes(y=r1), col="black")
